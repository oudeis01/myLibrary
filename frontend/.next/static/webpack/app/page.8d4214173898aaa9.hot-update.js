"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authApi: () => (/* binding */ authApi),\n/* harmony export */   bookApi: () => (/* binding */ bookApi),\n/* harmony export */   getSessionToken: () => (/* binding */ getSessionToken),\n/* harmony export */   healthApi: () => (/* binding */ healthApi),\n/* harmony export */   progressApi: () => (/* binding */ progressApi),\n/* harmony export */   removeSessionToken: () => (/* binding */ removeSessionToken),\n/* harmony export */   setSessionToken: () => (/* binding */ setSessionToken)\n/* harmony export */ });\n/**\n * @file lib/api.ts\n * @brief API communication utilities for MyLibrary frontend\n * @author MyLibrary Team\n * @version 0.1.0\n * @date 2025-08-26\n */ const API_BASE = 'http://localhost:8080/api';\n/**\n * Get session token from localStorage\n */ function getSessionToken() {\n    if (false) {}\n    const token = localStorage.getItem('sessionToken');\n    console.log('🔑 getSessionToken:', token ? \"\".concat(token.substring(0, 10), \"...\") : null);\n    return token;\n}\n/**\n * Set session token in localStorage\n */ function setSessionToken(token) {\n    if (false) {}\n    console.log('💾 setSessionToken:', token ? \"\".concat(token.substring(0, 10), \"...\") : null);\n    localStorage.setItem('sessionToken', token);\n    // 즉시 확인\n    const saved = localStorage.getItem('sessionToken');\n    console.log('💾 Token saved verification:', saved ? \"\".concat(saved.substring(0, 10), \"...\") : null);\n}\n/**\n * Remove session token from localStorage\n */ function removeSessionToken() {\n    if (false) {}\n    localStorage.removeItem('sessionToken');\n}\n/**\n * Get authenticated headers\n */ function getAuthHeaders() {\n    const token = getSessionToken();\n    const headers = {\n        'Content-Type': 'application/json',\n        ...token && {\n            'X-Session-Token': token\n        }\n    };\n    console.log('🔑 API Headers:', {\n        token: token ? \"\".concat(token.substring(0, 10), \"...\") : null,\n        headers\n    });\n    return headers;\n}\n/**\n * Handle API response\n */ async function handleResponse(response) {\n    if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(errorText || \"HTTP \".concat(response.status));\n    }\n    return response.json();\n}\n/**\n * User authentication\n */ const authApi = {\n    /**\n   * Register new user\n   */ register: async (username, password)=>{\n        const response = await fetch(\"\".concat(API_BASE, \"/register\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username,\n                password\n            })\n        });\n        const result = await handleResponse(response);\n        // 회원가입 성공시 토큰 저장\n        if (result.session_token) {\n            setSessionToken(result.session_token);\n        }\n        return result;\n    },\n    /**\n   * Login user\n   */ login: async (username, password)=>{\n        console.log('🔐 Login attempt:', {\n            username,\n            password: '***'\n        });\n        const response = await fetch(\"\".concat(API_BASE, \"/login\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username,\n                password\n            })\n        });\n        console.log('🔐 Login response:', {\n            status: response.status,\n            statusText: response.statusText,\n            url: response.url\n        });\n        const result = await handleResponse(response);\n        console.log('🔐 Login result:', {\n            username: result.username,\n            session_token: result.session_token ? \"\".concat(result.session_token.substring(0, 10), \"...\") : null\n        });\n        // 로그인 성공시 토큰 저장\n        if (result.session_token) {\n            console.log('💾 Saving token to localStorage');\n            setSessionToken(result.session_token);\n        } else {\n            console.error('❌ No session_token in response!');\n        }\n        return result;\n    },\n    /**\n   * Logout user\n   */ logout: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE, \"/logout\"), {\n            method: 'POST',\n            headers: getAuthHeaders()\n        });\n        if (response.ok) {\n            removeSessionToken();\n        }\n    }\n};\n/**\n * Book management\n */ const bookApi = {\n    /**\n   * Get all user books\n   */ getBooks: async ()=>{\n        console.log('📚 Requesting books...');\n        const headers = getAuthHeaders();\n        const response = await fetch(\"\".concat(API_BASE, \"/books\"), {\n            headers\n        });\n        console.log('📚 Books response:', {\n            status: response.status,\n            statusText: response.statusText,\n            headers: Object.fromEntries(response.headers.entries())\n        });\n        return handleResponse(response);\n    },\n    /**\n   * Upload new book\n   */ uploadBook: async (formData)=>{\n        const token = getSessionToken();\n        const response = await fetch(\"\".concat(API_BASE, \"/books/upload\"), {\n            method: 'POST',\n            headers: {\n                ...token && {\n                    'X-Session-Token': token\n                }\n            },\n            body: formData\n        });\n        return handleResponse(response);\n    },\n    /**\n   * Get book file URL\n   */ getBookFileUrl: (bookId)=>{\n        return \"\".concat(API_BASE, \"/books/\").concat(bookId, \"/file\");\n    },\n    /**\n   * Get book download URL\n   */ getBookDownloadUrl: (bookId)=>{\n        return \"\".concat(API_BASE, \"/books/\").concat(bookId, \"/download\");\n    }\n};\n/**\n * Reading progress\n */ const progressApi = {\n    /**\n   * Get reading progress for a book\n   */ getProgress: async (bookId)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE, \"/books/\").concat(bookId, \"/progress\"), {\n                headers: getAuthHeaders()\n            });\n            if (response.status === 404) return null;\n            return handleResponse(response);\n        } catch (error) {\n            console.error('Error getting progress:', error);\n            return null;\n        }\n    },\n    /**\n   * Update reading progress for a book\n   */ updateProgress: async (bookId, progress)=>{\n        const response = await fetch(\"\".concat(API_BASE, \"/books/\").concat(bookId, \"/progress\"), {\n            method: 'PUT',\n            headers: getAuthHeaders(),\n            body: JSON.stringify({\n                ...progress,\n                updated_at: new Date().toISOString()\n            })\n        });\n        return handleResponse(response);\n    }\n};\n/**\n * Health check\n */ const healthApi = {\n    check: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE, \"/health\"));\n        return handleResponse(response);\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});